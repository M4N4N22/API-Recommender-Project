 Code Snippet                                                                                                                                                  , API Name          , Function/Method Name      , Description/Functionality             , Usage Example                                                                                                    , Language/Framework      
" function getPopularVideos(apiKey) { return fetch(\https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails,statistics&chart=mostPopular&key=\${apiKey}\).then(response => response.json()); } ", YouTube Data API  , getPopularVideos          , Get most popular videos               , getPopularVideos('your_api_key');                                                                              , JavaScript/Fetch API    
 function getVideoCategories(apiKey) { return fetch(\https://www.googleapis.com/youtube/v3/videoCategories?part=snippet&regionCode=US&key=\${apiKey}\).then(response => response.json()); }                   , YouTube Data API  , getVideoCategories        , Get video categories                  , getVideoCategories('your_api_key');                                                                            , JavaScript/Fetch API    
" function getTrendingVideos(regionCode, apiKey) { return fetch(\https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails,statistics&chart=mostPopular&regionCode=\${regionCode}&key=\${apiKey}\).then(response => response.json()); } ", YouTube Data API  , getTrendingVideos         , Get trending videos by region          ," getTrendingVideos('US', 'your_api_key');                                                                       ", JavaScript/Fetch API    
" function getVideoTags(videoId, apiKey) { return fetch(\https://www.googleapis.com/youtube/v3/videos?id=\${videoId}&key=\${apiKey}&part=snippet\).then(response => response.json()).then(data => data.items[0].snippet.tags); } ", YouTube Data API  , getVideoTags              , Get tags of a video                   ," getVideoTags('dQw4w9WgXcQ', 'your_api_key');                                                                   ", JavaScript/Fetch API    
" function getRelatedVideos(videoId, apiKey) { return fetch(\https://www.googleapis.com/youtube/v3/search?relatedToVideoId=\${videoId}&type=video&key=\${apiKey}&part=snippet\).then(response => response.json()); } ", YouTube Data API  , getRelatedVideos          , Get related videos                    ," getRelatedVideos('dQw4w9WgXcQ', 'your_api_key');                                                               ", JavaScript/Fetch API    
" function getVideoStatistics(videoId, apiKey) { return fetch(\https://www.googleapis.com/youtube/v3/videos?id=\${videoId}&key=\${apiKey}&part=statistics\).then(response => response.json()); }                ", YouTube Data API  , getVideoStatistics        , Get statistics of a video             ," getVideoStatistics('dQw4w9WgXcQ', 'your_api_key');                                                             ", JavaScript/Fetch API    
" function getUserSubscriptions(userId, apiKey) { return fetch(\https://www.googleapis.com/youtube/v3/subscriptions?part=snippet&mine=true&key=\${apiKey}\, { headers: { 'Authorization': \Bearer \${userId}\ } }).then(response => response.json()); } ", YouTube Data API  , getUserSubscriptions      , Get user subscriptions                ," getUserSubscriptions('user_id', 'your_api_key');                                                               ", JavaScript/Fetch API    
" function getChannelPlaylists(channelId, apiKey) { return fetch(\https://www.googleapis.com/youtube/v3/playlists?part=snippet&channelId=\${channelId}&key=\${apiKey}\).then(response => response.json()); }     ", YouTube Data API  , getChannelPlaylists       , Get playlists of a channel            ," getChannelPlaylists('UC_x5XG1OV2P6uZZ5FSM9Ttw', 'your_api_key');                                               ", JavaScript/Fetch API    
" function getPlaylistDetails(playlistId, apiKey) { return fetch(\https://www.googleapis.com/youtube/v3/playlists?part=snippet,contentDetails&id=\${playlistId}&key=\${apiKey}\).then(response => response.json()); } ", YouTube Data API  , getPlaylistDetails        , Get details of a playlist             ," getPlaylistDetails('PLBCF2DAC6FFB574DE', 'your_api_key');                                                      ", JavaScript/Fetch API    
" function updateVideoDetails(videoId, apiKey, updateData) { return fetch(\https://www.googleapis.com/youtube/v3/videos?part=snippet\, { method: 'PUT', headers: { 'Authorization': \Bearer \${apiKey}\, 'Content-Type': 'application/json' }, body: JSON.stringify({ id: videoId, snippet: updateData }) }).then(response => response.json()); } ", YouTube Data API  , updateVideoDetails        , Update details of a video             ," updateVideoDetails('dQw4w9WgXcQ', 'your_api_key', { title: 'New Title' });                                     ", JavaScript/Fetch API    
" function getVideoDetails(videoId, apiKey) { return fetch(\https://www.googleapis.com/youtube/v3/videos?id=\${videoId}&key=\${apiKey}&part=snippet,contentDetails,statistics\).then(response => response.json()); } ", YouTube Data API  , getVideoDetails           , Get details of a video                ," getVideoDetails('dQw4w9WgXcQ', 'your_api_key');                                                              ", JavaScript/Fetch API    
" function searchVideos(query, apiKey) { return fetch(\https://www.googleapis.com/youtube/v3/search?key=\${apiKey}&q=\${query}&part=snippet&type=video\).then(response => response.json()); }                         ", YouTube Data API  , searchVideos              , Search for videos                      ," searchVideos('programming tutorials', 'your_api_key');                                                       ", JavaScript/Fetch API    
" function getChannelDetails(channelId, apiKey) { return fetch(\https://www.googleapis.com/youtube/v3/channels?id=\${channelId}&key=\${apiKey}&part=snippet,contentDetails,statistics\).then(response => response.json()); } ", YouTube Data API  , getChannelDetails         , Get details of a channel               ," getChannelDetails('UC_x5XG1OV2P6uZZ5FSM9Ttw', 'your_api_key');                                                ", JavaScript/Fetch API    
" function getPlaylistItems(playlistId, apiKey) { return fetch(\https://www.googleapis.com/youtube/v3/playlistItems?playlistId=\${playlistId}&key=\${apiKey}&part=snippet,contentDetails\).then(response => response.json()); } ", YouTube Data API  , getPlaylistItems          , Get items in a playlist                ," getPlaylistItems('PLBCF2DAC6FFB574DE', 'your_api_key');                                                      ", JavaScript/Fetch API    
" function getVideoComments(videoId, apiKey) { return fetch(\https://www.googleapis.com/youtube/v3/commentThreads?videoId=\${videoId}&key=\${apiKey}&part=snippet\).then(response => response.json()); }              ", YouTube Data API  , getVideoComments          , Get comments on a video                ," getVideoComments('dQw4w9WgXcQ', 'your_api_key');                                                             ", JavaScript/Fetch API    
" function postComment(videoId, commentText, apiKey) { return fetch(\https://www.googleapis.com/youtube/v3/commentThreads?part=snippet\, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ snippet: { videoId: videoId, topLevelComment: { snippet: { textOriginal: commentText } } } }) }).then(response => response.json()); } ", YouTube Data API  , postComment               , Post a comment on a video              ," postComment('dQw4w9WgXcQ', 'Great video!', 'your_api_key');                                                 ", JavaScript/Fetch API    
" function getChannelVideos(channelId, apiKey) { return fetch(\https://www.googleapis.com/youtube/v3/search?key=\${apiKey}&channelId=\${channelId}&part=snippet&type=video\).then(response => response.json()); }    ", YouTube Data API  , getChannelVideos          , Get videos from a channel              ," getChannelVideos('UC_x5XG1OV2P6uZZ5FSM9Ttw', 'your_api_key');                                                ", JavaScript/Fetch API    
" function likeVideo(videoId, accessToken) { return fetch(\https://www.googleapis.com/youtube/v3/videos/rate?id=\${videoId}&rating=like\, { method: 'POST', headers: { 'Authorization': \Bearer \${accessToken}\ } }).then(response => response.json()); } ", YouTube Data API  , likeVideo                 , Like a video                           ," likeVideo('dQw4w9WgXcQ', 'your_access_token');                                                               ", JavaScript/Fetch API    
" function subscribeToChannel(channelId, accessToken) { return fetch(\https://www.googleapis.com/youtube/v3/subscriptions?part=snippet\, { method: 'POST', headers: { 'Authorization': \Bearer \${accessToken}\ }, body: JSON.stringify({ snippet: { resourceId: { kind: 'youtube#channel', channelId: channelId } } }) }).then(response => response.json()); } ", YouTube Data API  , subscribeToChannel        , Subscribe to a channel                 ," subscribeToChannel('UC_x5XG1OV2P6uZZ5FSM9Ttw', 'your_access_token');                                         ", JavaScript/Fetch API    
" function getVideoLikes(videoId, apiKey) { return fetch(\https://www.googleapis.com/youtube/v3/videos/getRating?id=\${videoId}&key=\${apiKey}\).then(response => response.json()); }                                ", YouTube Data API  , getVideoLikes             , Get likes on a video                   ," getVideoLikes('dQw4w9WgXcQ', 'your_api_key');                                                                 ", JavaScript/Fetch API    
" function getUserPhotos(userId, accessToken) { return fetch(\https://graph.facebook.com/\${userId}/photos?access_token=\${accessToken}\) } ", Facebook Graph API  , getUserPhotos              , Get photos of a user                      ," getUserPhotos('12345', 'your_access_token');                                                      ", JavaScript/Fetch API    
" function postPhotoToPage(pageId, photoUrl, accessToken) { return fetch(\https://graph.facebook.com/\${pageId}/photos\, { method: 'POST', body: \url=\${photoUrl}&access_token=\${accessToken}\ }) } ", Facebook Graph API  , postPhotoToPage            , Post a photo to a page                    ," postPhotoToPage('67890', 'https://example.com/photo.jpg', 'your_access_token');                    ", JavaScript/Fetch API    
" function getUserAlbums(userId, accessToken) { return fetch(\https://graph.facebook.com/\${userId}/albums?access_token=\${accessToken}\) } ", Facebook Graph API  , getUserAlbums              , Get albums of a user                      ," getUserAlbums('12345', 'your_access_token');                                                      ", JavaScript/Fetch API    
" function createAlbum(pageId, albumData, accessToken) { return fetch(\https://graph.facebook.com/\${pageId}/albums?access_token=\${accessToken}\, { method: 'POST', body: JSON.stringify(albumData) }) } ", Facebook Graph API  , createAlbum                , Create an album on a page                 ," createAlbum('67890', { name: 'New Album', description: 'Album description' }, 'your_access_token');", JavaScript/Fetch API    
" function getPostComments(postId, accessToken) { return fetch(\https://graph.facebook.com/\${postId}/comments?access_token=\${accessToken}\) } ", Facebook Graph API  , getPostComments            , Get comments on a post                    ," getPostComments('34567', 'your_access_token');                                                    ", JavaScript/Fetch API    
" function postComment(postId, message, accessToken) { return fetch(\https://graph.facebook.com/\${postId}/comments\, { method: 'POST', body: \message=\${message}&access_token=\${accessToken}\ }) } ", Facebook Graph API  , postComment                , Post a comment on a post                  ," postComment('34567', 'Nice post!', 'your_access_token');                                          ", JavaScript/Fetch API    
" function getPageLikes(pageId, accessToken) { return fetch(\https://graph.facebook.com/\${pageId}/likes?access_token=\${accessToken}\) } ", Facebook Graph API  , getPageLikes               , Get likes on a page                       ," getPageLikes('67890', 'your_access_token');                                                       ", JavaScript/Fetch API    
" function getUserLikes(userId, accessToken) { return fetch(\https://graph.facebook.com/\${userId}/likes?access_token=\${accessToken}\) } ", Facebook Graph API  , getUserLikes               , Get pages liked by a user                 ," getUserLikes('12345', 'your_access_token');                                                       ", JavaScript/Fetch API    
" function getGroupMembers(groupId, accessToken) { return fetch(\https://graph.facebook.com/\${groupId}/members?access_token=\${accessToken}\) } ", Facebook Graph API  , getGroupMembers            , Get members of a group                    ," getGroupMembers('56789', 'your_access_token');                                                    ", JavaScript/Fetch API    
" function createGroup(groupData, accessToken) { return fetch(\https://graph.facebook.com/me/groups?access_token=\${accessToken}\, { method: 'POST', body: JSON.stringify(groupData) }) } ", Facebook Graph API  , createGroup                , Create a group                            ," createGroup({ name: 'New Group', description: 'Group description' }, 'your_access_token');         ", JavaScript/Fetch API    
" function getUserProfile(userId, accessToken) { return fetch(\https://graph.facebook.com/\${userId}?access_token=\${accessToken}\) } ", Facebook Graph API  , getUserProfile             , Get profile information of a user        ," getUserProfile('12345', 'your_access_token');                                                      ", JavaScript/Fetch API    
" function getPagePosts(pageId, accessToken) { return fetch(\https://graph.facebook.com/\${pageId}/posts?access_token=\${accessToken}\) } ", Facebook Graph API  , getPagePosts               , Get posts from a page                    ," getPagePosts('67890', 'your_access_token');                                                        ", JavaScript/Fetch API    
" function postPageStatus(pageId, message, accessToken) { return fetch(\https://graph.facebook.com/\${pageId}/feed\, { method: 'POST', body: \message=\${message}&access_token=\${accessToken}\ }) } ", Facebook Graph API  , postPageStatus             , Post a status to a page                  ," postPageStatus('67890', 'Hello, world!', 'your_access_token');                                      ", JavaScript/Fetch API    
" function likePage(pageId, accessToken) { return fetch(\https://graph.facebook.com/\${pageId}/likes?access_token=\${accessToken}\, { method: 'POST' }) } ", Facebook Graph API  , likePage                   , Like a page                              ," likePage('67890', 'your_access_token');                                                             ", JavaScript/Fetch API    
" function getUserFriends(userId, accessToken) { return fetch(\https://graph.facebook.com/\${userId}/friends?access_token=\${accessToken}\) } ", Facebook Graph API  , getUserFriends             , Get friends list of a user               ," getUserFriends('12345', 'your_access_token');                                                       ", JavaScript/Fetch API    
" function getPageInsights(pageId, accessToken) { return fetch(\https://graph.facebook.com/\${pageId}/insights?access_token=\${accessToken}\) } ", Facebook Graph API  , getPageInsights            , Get insights for a page                  ," getPageInsights('67890', 'your_access_token');                                                      ", JavaScript/Fetch API    
" function getEventDetails(eventId, accessToken) { return fetch(\https://graph.facebook.com/\${eventId}?access_token=\${accessToken}\) } ", Facebook Graph API  , getEventDetails            , Get details of an event                  ," getEventDetails('111213', 'your_access_token');                                                     ", JavaScript/Fetch API    
" function createEvent(pageId, eventData, accessToken) { return fetch(\https://graph.facebook.com/\${pageId}/events?access_token=\${accessToken}\, { method: 'POST', body: JSON.stringify(eventData) }) } ", Facebook Graph API  , createEvent                , Create an event on a page                ," createEvent('67890', { name: 'New Event', start_time: '2022-12-31T23:59:00' }, 'your_access_token'); ", JavaScript/Fetch API    
" function getPageVideos(pageId, accessToken) { return fetch(\https://graph.facebook.com/\${pageId}/videos?access_token=\${accessToken}\) } ", Facebook Graph API  , getPageVideos              , Get videos from a page                   ," getPageVideos('67890', 'your_access_token');                                                        ", JavaScript/Fetch API    
" function deletePost(postId, accessToken) { return fetch(\https://graph.facebook.com/\${postId}?access_token=\${accessToken}\, { method: 'DELETE' }) } ", Facebook Graph API  , deletePost                 , Delete a post from a page                ," deletePost('34567', 'your_access_token');                                                           ", JavaScript/Fetch API    
" function followUser(userId) { return fetch(\https://api.twitter.com/2/users/\${userId}/follow\, { method: 'POST' }) }                ", Twitter API    , followUser                 , Follow a user                            , followUser('12345');                                                                               , JavaScript/Fetch API    
" function unfollowUser(userId) { return fetch(\https://api.twitter.com/2/users/\${userId}/follow\, { method: 'DELETE' }) }            ", Twitter API    , unfollowUser               , Unfollow a user                          , unfollowUser('12345');                                                                             , JavaScript/Fetch API    
 function getUserMentions(userId) { return fetch(\https://api.twitter.com/2/users/\${userId}/mentions\) }                             , Twitter API    , getUserMentions            , Get mentions of a user                   , getUserMentions('12345');                                                                           , JavaScript/Fetch API    
 function getUserTweets(userId) { return fetch(\https://api.twitter.com/2/users/\${userId}/tweets\) }                                 , Twitter API    , getUserTweets              , Get tweets of a user                     , getUserTweets('12345');                                                                             , JavaScript/Fetch API    
" function blockUser(userId) { return fetch(\https://api.twitter.com/2/users/\${userId}/block\, { method: 'POST' }) }                  ", Twitter API    , blockUser                  , Block a user                             , blockUser('12345');                                                                                 , JavaScript/Fetch API    
" function unblockUser(userId) { return fetch(\https://api.twitter.com/2/users/\${userId}/block\, { method: 'DELETE' }) }              ", Twitter API    , unblockUser                , Unblock a user                           , unblockUser('12345');                                                                               , JavaScript/Fetch API    
" function muteUser(userId) { return fetch(\https://api.twitter.com/2/users/\${userId}/mute\, { method: 'POST' }) }                    ", Twitter API    , muteUser                   , Mute a user                              , muteUser('12345');                                                                                  , JavaScript/Fetch API    
" function unmuteUser(userId) { return fetch(\https://api.twitter.com/2/users/\${userId}/mute\, { method: 'DELETE' }) }                ", Twitter API    , unmuteUser                 , Unmute a user                            , unmuteUser('12345');                                                                                , JavaScript/Fetch API    
 function getTrends(locationId) { return fetch(\https://api.twitter.com/2/trends/place.json?id=\${locationId}\) }                     , Twitter API    , getTrends                  , Get trending topics for a location       , getTrends('1');                                                                                     , JavaScript/Fetch API    
 function getTweet(tweetId) { return fetch(\https://api.twitter.com/2/tweets/\${tweetId}\) }                                          , Twitter API    , getTweet                   , Get details of a specific tweet          , getTweet('67890');                                                                                  , JavaScript/Fetch API    
 function getTweetsByHashtag(hashtag) { return fetch(\https://api.twitter.com/2/tweets/search/recent?query=\${hashtag}\) }       , Twitter API    , getTweetsByHashtag         , Fetch tweets by hashtag                 , getTweetsByHashtag('#coding');                                                                   , JavaScript/Fetch API    
" function postTweet(status) { return fetch('https://api.twitter.com/2/tweets', { method: 'POST', body: JSON.stringify({ status }) }) } ", Twitter API    , postTweet                  , Post a new tweet                        , postTweet('Hello World!');                                                                       , JavaScript/Fetch API    
 function getUserProfile(username) { return fetch(\https://api.twitter.com/2/users/by/username/\${username}\) }                   , Twitter API    , getUserProfile             , Get user profile by username            , getUserProfile('jack');                                                                           , JavaScript/Fetch API    
 function getFollowers(userId) { return fetch(\https://api.twitter.com/2/users/\${userId}/followers\) }                           , Twitter API    , getFollowers               , Get followers of a user                 , getFollowers('12345');                                                                            , JavaScript/Fetch API    
 function getUserTimeline(userId) { return fetch(\https://api.twitter.com/2/users/\${userId}/tweets\) }                           , Twitter API    , getUserTimeline            , Get user's tweet timeline               , getUserTimeline('12345');                                                                         , JavaScript/Fetch API    
" function likeTweet(tweetId) { return fetch(\https://api.twitter.com/2/tweets/\${tweetId}/like\, { method: 'POST' }) }            ", Twitter API    , likeTweet                  , Like a tweet                            , likeTweet('67890');                                                                               , JavaScript/Fetch API    
" function retweet(tweetId) { return fetch(\https://api.twitter.com/2/tweets/\${tweetId}/retweet\, { method: 'POST' }) }           ", Twitter API    , retweet                    , Retweet a tweet                         , retweet('67890');                                                                                 , JavaScript/Fetch API    
 function getLikedTweets(userId) { return fetch(\https://api.twitter.com/2/users/\${userId}/liked_tweets\) }                      , Twitter API    , getLikedTweets             , Get liked tweets of a user              , getLikedTweets('12345');                                                                          , JavaScript/Fetch API    
" function deleteTweet(tweetId) { return fetch(\https://api.twitter.com/2/tweets/\${tweetId}\, { method: 'DELETE' }) }             ", Twitter API    , deleteTweet                , Delete a tweet                          , deleteTweet('67890');                                                                             , JavaScript/Fetch API    
" function sendDirectMessage(userId, text) { return fetch('https://api.twitter.com/2/direct_messages/events/new', { method: 'POST', body: JSON.stringify({ userId, text }) }) } ", Twitter API    , sendDirectMessage          , Send a direct message to a user         ," sendDirectMessage('12345', 'Hello!');                                                             ", JavaScript/Fetch API    
 const stripe = require('stripe')('your_api_key'); async function createCustomer() { const customer = await stripe.customers.create({ email: 'customer@example.com' }); return customer; } , Stripe API , createCustomer        , Create a new customer                 , createCustomer();                                                                               , Node.js            
 const stripe = require('stripe')('your_api_key'); async function retrieveCustomer(customerId) { const customer = await stripe.customers.retrieve(customerId); return customer; }          , Stripe API , retrieveCustomer      , Retrieve a customer by ID             , retrieveCustomer('cus_123456789');                                                              , Node.js            
" const stripe = require('stripe')('your_api_key'); async function createCharge() { const charge = await stripe.charges.create({ amount: 2000, currency: 'usd', source: 'tok_visa' }); return charge; } ", Stripe API , createCharge          , Create a new charge                   , createCharge();                                                                                 , Node.js            
 const stripe = require('stripe')('your_api_key'); async function retrieveCharge(chargeId) { const charge = await stripe.charges.retrieve(chargeId); return charge; }                     , Stripe API , retrieveCharge        , Retrieve a charge by ID               , retrieveCharge('ch_123456789');                                                                 , Node.js            
" const stripe = require('stripe')('your_api_key'); async function createPaymentIntent() { const paymentIntent = await stripe.paymentIntents.create({ amount: 2000, currency: 'usd' }); return paymentIntent; } ", Stripe API , createPaymentIntent   , Create a new payment intent           , createPaymentIntent();                                                                          , Node.js            
 const stripe = require('stripe')('your_api_key'); async function retrievePaymentIntent(intentId) { const paymentIntent = await stripe.paymentIntents.retrieve(intentId); return paymentIntent; } , Stripe API , retrievePaymentIntent , Retrieve a payment intent by ID       , retrievePaymentIntent('pi_123456789');                                                          , Node.js            
" const stripe = require('stripe')('your_api_key'); async function createSubscription() { const subscription = await stripe.subscriptions.create({ customer: 'cus_123456789', items: [{ plan: 'plan_123456789' }] }); return subscription; } ", Stripe API , createSubscription    , Create a new subscription             , createSubscription();                                                                           , Node.js            
 const stripe = require('stripe')('your_api_key'); async function retrieveSubscription(subscriptionId) { const subscription = await stripe.subscriptions.retrieve(subscriptionId); return subscription; } , Stripe API , retrieveSubscription  , Retrieve a subscription by ID         , retrieveSubscription('sub_123456789');                                                          , Node.js            
 const stripe = require('stripe')('your_api_key'); async function createInvoice() { const invoice = await stripe.invoices.create({ customer: 'cus_123456789' }); return invoice; }         , Stripe API , createInvoice         , Create a new invoice                  , createInvoice();                                                                                , Node.js            
 const stripe = require('stripe')('your_api_key'); async function retrieveInvoice(invoiceId) { const invoice = await stripe.invoices.retrieve(invoiceId); return invoice; }                , Stripe API , retrieveInvoice       , Retrieve an invoice by ID             , retrieveInvoice('in_123456789');                                                                , Node.js            
 const stripe = require('stripe')('your_api_key'); async function createProduct() { const product = await stripe.products.create({ name: 'My Product' }); return product; }               , Stripe API , createProduct         , Create a new product                  , createProduct();                                                                                , Node.js            
 const stripe = require('stripe')('your_api_key'); async function retrieveProduct(productId) { const product = await stripe.products.retrieve(productId); return product; }                , Stripe API , retrieveProduct       , Retrieve a product by ID              , retrieveProduct('prod_123456789');                                                              , Node.js            
" const stripe = require('stripe')('your_api_key'); async function createPlan() { const plan = await stripe.plans.create({ amount: 2000, currency: 'usd', interval: 'month', product: 'prod_123456789' }); return plan; } ", Stripe API , createPlan            , Create a new plan                     , createPlan();                                                                                   , Node.js            
 const stripe = require('stripe')('your_api_key'); async function retrievePlan(planId) { const plan = await stripe.plans.retrieve(planId); return plan; }                                 , Stripe API , retrievePlan          , Retrieve a plan by ID                 , retrievePlan('plan_123456789');                                                                 , Node.js            
" const stripe = require('stripe')('your_api_key'); async function createCoupon() { const coupon = await stripe.coupons.create({ percent_off: 25, duration: 'once' }); return coupon; }     ", Stripe API , createCoupon          , Create a new coupon                   , createCoupon();                                                                                 , Node.js            
 const stripe = require('stripe')('your_api_key'); async function retrieveCoupon(couponId) { const coupon = await stripe.coupons.retrieve(couponId); return coupon; }                     , Stripe API , retrieveCoupon        , Retrieve a coupon by ID               , retrieveCoupon('coupon_123456789');                                                             , Node.js            
 const stripe = require('stripe')('your_api_key'); async function createRefund(chargeId) { const refund = await stripe.refunds.create({ charge: chargeId }); return refund; }              , Stripe API , createRefund          , Create a refund for a charge          , createRefund('ch_123456789');                                                                    , Node.js            
 const stripe = require('stripe')('your_api_key'); async function retrieveRefund(refundId) { const refund = await stripe.refunds.retrieve(refundId); return refund; }                     , Stripe API , retrieveRefund        , Retrieve a refund by ID               , retrieveRefund('re_123456789');                                                                 , Node.js            
 const stripe = require('stripe')('your_api_key'); async function listAllCharges() { const charges = await stripe.charges.list({ limit: 10 }); return charges; }                          , Stripe API , listAllCharges        , List all charges                      , listAllCharges();                                                                               , Node.js            
 const stripe = require('stripe')('your_api_key'); async function listAllCustomers() { const customers = await stripe.customers.list({ limit: 10 }); return customers; }                  , Stripe API , listAllCustomers      , List all customers                    , listAllCustomers();                                                                             , Node.js            
 const AWS = require('aws-sdk'); const s3 = new AWS.S3(); async function createBucket(bucketName) { const params = { Bucket: bucketName }; await s3.createBucket(params).promise(); }      , Amazon S3  , createBucket          , Create a new S3 bucket               , createBucket('my-new-bucket');                                                                  , Node.js            
 const AWS = require('aws-sdk'); const s3 = new AWS.S3(); async function deleteBucket(bucketName) { const params = { Bucket: bucketName }; await s3.deleteBucket(params).promise(); }      , Amazon S3  , deleteBucket          , Delete an S3 bucket                  , deleteBucket('my-old-bucket');                                                                  , Node.js            
 const AWS = require('aws-sdk'); const s3 = new AWS.S3(); async function listBuckets() { const data = await s3.listBuckets().promise(); return data.Buckets; }                             , Amazon S3  , listBuckets           , List all S3 buckets                  , listBuckets();                                                                                  , Node.js            
" const AWS = require('aws-sdk'); const s3 = new AWS.S3(); async function uploadObject(bucketName, key, body) { const params = { Bucket: bucketName, Key: key, Body: body }; await s3.putObject(params).promise(); } ", Amazon S3  , uploadObject          , Upload an object to S3               ," uploadObject('my-bucket', 'my-key', 'Hello, world!');                                           ", Node.js            
" const AWS = require('aws-sdk'); const s3 = new AWS.S3(); async function getObject(bucketName, key) { const params = { Bucket: bucketName, Key: key }; const data = await s3.getObject(params).promise(); return data.Body.toString('utf-8'); } ", Amazon S3  , getObject             , Retrieve an object from S3           ," getObject('my-bucket', 'my-key');                                                               ", Node.js            
" const AWS = require('aws-sdk'); const s3 = new AWS.S3(); async function deleteObject(bucketName, key) { const params = { Bucket: bucketName, Key: key }; await s3.deleteObject(params).promise(); } ", Amazon S3  , deleteObject          , Delete an object from S3             ," deleteObject('my-bucket', 'my-key');                                                            ", Node.js            
" const AWS = require('aws-sdk'); const s3 = new AWS.S3(); async function copyObject(srcBucket, srcKey, destBucket, destKey) { const params = { Bucket: destBucket, CopySource: ${srcBucket}/${srcKey}, Key: destKey }; await s3.copyObject(params).promise(); } ", Amazon S3  , copyObject            , Copy an object within S3             ," copyObject('src-bucket', 'src-key', 'dest-bucket', 'dest-key');                                 ", Node.js            
 const AWS = require('aws-sdk'); const s3 = new AWS.S3(); async function listObjects(bucketName) { const params = { Bucket: bucketName }; const data = await s3.listObjectsV2(params).promise(); return data.Contents; } , Amazon S3  , listObjects           , List objects in a bucket             , listObjects('my-bucket');                                                                       , Node.js            
 const AWS = require('aws-sdk'); const s3 = new AWS.S3(); async function getBucketPolicy(bucketName) { const params = { Bucket: bucketName }; const data = await s3.getBucketPolicy(params).promise(); return data.Policy; } , Amazon S3  , getBucketPolicy       , Retrieve a bucket policy             , getBucketPolicy('my-bucket');                                                                   , Node.js            
" const AWS = require('aws-sdk'); const s3 = new AWS.S3(); async function putBucketPolicy(bucketName, policy) { const params = { Bucket: bucketName, Policy: policy }; await s3.putBucketPolicy(params).promise(); } ", Amazon S3  , putBucketPolicy       , Apply a policy to a bucket           ," putBucketPolicy('my-bucket', myPolicy);                                                         ", Node.js            
 const AWS = require('aws-sdk'); const s3 = new AWS.S3(); async function getBucketLocation(bucketName) { const params = { Bucket: bucketName }; const data = await s3.getBucketLocation(params).promise(); return data.LocationConstraint; } , Amazon S3  , getBucketLocation     , Get the location of a bucket         , getBucketLocation('my-bucket');                                                                 , Node.js            
 const AWS = require('aws-sdk'); const s3 = new AWS.S3(); async function getBucketCors(bucketName) { const params = { Bucket: bucketName }; const data = await s3.getBucketCors(params).promise(); return data.CORSRules; } , Amazon S3  , getBucketCors         , Get the CORS configuration of a bucket , getBucketCors('my-bucket');                                                                    , Node.js            
" const AWS = require('aws-sdk'); const s3 = new AWS.S3(); async function putBucketCors(bucketName, corsConfiguration) { const params = { Bucket: bucketName, CORSConfiguration: corsConfiguration }; await s3.putBucketCors(params).promise(); } ", Amazon S3  , putBucketCors         , Apply a CORS configuration to a bucket ," putBucketCors('my-bucket', myCorsConfiguration);                                               ", Node.js            
 const AWS = require('aws-sdk'); const s3 = new AWS.S3(); async function deleteBucketCors(bucketName) { const params = { Bucket: bucketName }; await s3.deleteBucketCors(params).promise(); } , Amazon S3  , deleteBucketCors      , Delete the CORS configuration of a bucket , deleteBucketCors('my-bucket');                                                                , Node.js            
 const AWS = require('aws-sdk'); const s3 = new AWS.S3(); async function getBucketLifecycle(bucketName) { const params = { Bucket: bucketName }; const data = await s3.getBucketLifecycleConfiguration(params).promise(); return data.Rules; } , Amazon S3  , getBucketLifecycle    , Get the lifecycle configuration of a bucket , getBucketLifecycle('my-bucket');                                                             , Node.js            
" const AWS = require('aws-sdk'); const s3 = new AWS.S3(); async function putBucketLifecycle(bucketName, lifecycleConfiguration) { const params = { Bucket: bucketName, LifecycleConfiguration: lifecycleConfiguration }; await s3.putBucketLifecycleConfiguration(params).promise(); } ", Amazon S3  , putBucketLifecycle    , Apply a lifecycle configuration to a bucket ," putBucketLifecycle('my-bucket', myLifecycleConfiguration);                                     ", Node.js            
 const AWS = require('aws-sdk'); const s3 = new AWS.S3(); async function deleteBucketLifecycle(bucketName) { const params = { Bucket: bucketName }; await s3.deleteBucketLifecycleConfiguration(params).promise(); } , Amazon S3  , deleteBucketLifecycle , Delete the lifecycle configuration of a bucket , deleteBucketLifecycle('my-bucket');                                                          , Node.js            
 const AWS = require('aws-sdk'); const s3 = new AWS.S3(); async function getBucketLogging(bucketName) { const params = { Bucket: bucketName }; const data = await s3.getBucketLogging(params).promise(); return data.LoggingEnabled; } , Amazon S3  , getBucketLogging      , Get the logging configuration of a bucket , getBucketLogging('my-bucket');                                                                 , Node.js            
" const AWS = require('aws-sdk'); const s3 = new AWS.S3(); async function putBucketLogging(bucketName, loggingConfiguration) { const params = { Bucket: bucketName, BucketLoggingStatus: loggingConfiguration }; await s3.putBucketLogging(params).promise(); } ", Amazon S3  , putBucketLogging      , Apply a logging configuration to a bucket ," putBucketLogging('my-bucket', myLoggingConfiguration);                                         ", Node.js            
 const AWS = require('aws-sdk'); const s3 = new AWS.S3(); async function getBucketNotification(bucketName) { const params = { Bucket: bucketName }; const data = await s3.getBucketNotificationConfiguration(params).promise(); return data; } , Amazon S3  , getBucketNotification , Get the notification configuration of a bucket , getBucketNotification('my-bucket');                                                         , Node.js            
" const octokit = require('@octokit/rest')(); async function getRepository(owner, repo) { const { data } = await octokit.repos.get({ owner, repo }); return data; } ", GitHub API , getRepository         , Retrieve repository information             ," getRepository('octocat', 'Hello-World');                                                              ", Node.js            
 const octokit = require('@octokit/rest')(); async function listRepositoriesForUser(username) { const { data } = await octokit.repos.listForUser({ username }); return data; } , GitHub API , listRepositories      , List repositories for a user               , listRepositoriesForUser('octocat');                                                                  , Node.js            
" const octokit = require('@octokit/rest')(); async function listBranches(owner, repo) { const { data } = await octokit.repos.listBranches({ owner, repo }); return data; }         ", GitHub API , listBranches          , List branches in a repository              ," listBranches('octocat', 'Hello-World');                                                              ", Node.js            
" const octokit = require('@octokit/rest')(); async function createIssue(owner, repo, title, body) { const { data } = await octokit.issues.create({ owner, repo, title, body }); return data; } ", GitHub API , createIssue           , Create a new issue in a repository        ," createIssue('octocat', 'Hello-World', 'New Issue', 'This is a new issue.');                          ", Node.js            
" const octokit = require('@octokit/rest')(); async function listIssues(owner, repo) { const { data } = await octokit.issues.listForRepo({ owner, repo }); return data; }         ", GitHub API , listIssues            , List issues in a repository               ," listIssues('octocat', 'Hello-World');                                                                ", Node.js            
" const octokit = require('@octokit/rest')(); async function createPullRequest(owner, repo, title, head, base, body) { const { data } = await octokit.pulls.create({ owner, repo, title, head, base, body }); return data; } ", GitHub API , createPullRequest     , Create a pull request in a repository     ," createPullRequest('octocat', 'Hello-World', 'New PR', 'feature-branch', 'master', 'PR description'); ", Node.js            
" const octokit = require('@octokit/rest')(); async function listPullRequests(owner, repo) { const { data } = await octokit.pulls.list({ owner, repo }); return data; }          ", GitHub API , listPullRequests      , List pull requests in a repository        ," listPullRequests('octocat', 'Hello-World');                                                         ", Node.js            
" const octokit = require('@octokit/rest')(); async function createCommentOnIssue(owner, repo, issueNumber, body) { const { data } = await octokit.issues.createComment({ owner, repo, issue_number: issueNumber, body }); return data; } ", GitHub API , createComment         , Create a comment on an issue              ," createCommentOnIssue('octocat', 'Hello-World', 123, 'This is a comment.');                           ", Node.js            
" const octokit = require('@octokit/rest')(); async function listCommentsOnIssue(owner, repo, issueNumber) { const { data } = await octokit.issues.listComments({ owner, repo, issue_number: issueNumber }); return data; } ", GitHub API , listComments          , List comments on an issue                  ," listCommentsOnIssue('octocat', 'Hello-World', 123);                                                 ", Node.js            
" const octokit = require('@octokit/rest')(); async function createCommitComment(owner, repo, sha, body) { const { data } = await octokit.repos.createCommitComment({ owner, repo, sha, body }); return data; } ", GitHub API , createCommitComment   , Create a comment on a commit              ," createCommitComment('octocat', 'Hello-World', 'abc123', 'This is a comment.');                       ", Node.js            
" const octokit = require('@octokit/rest')(); async function listCommentsOnCommit(owner, repo, sha) { const { data } = await octokit.repos.listCommitComments({ owner, repo, sha }); return data; } ", GitHub API , listCommitComments    , List comments on a commit                  ," listCommentsOnCommit('octocat', 'Hello",
" const octokit = require('@octokit/rest')(); async function createRelease(owner, repo, tag_name, target_commitish, name, body) { const { data } = await octokit.repos.createRelease({ owner, repo, tag_name, target_commitish, name, body }); return data; } ", GitHub API , createRelease         , Create a new release in a repository       ," createRelease('octocat', 'Hello-World', 'v1.0', 'master', 'First release', 'Release description.');  ", Node.js            
" const octokit = require('@octokit/rest')(); async function listReleases(owner, repo) { const { data } = await octokit.repos.listReleases({ owner, repo }); return data; }       ", GitHub API , listReleases          , List releases in a repository             ," listReleases('octocat', 'Hello-World');                                                              ", Node.js            
" const octokit = require('@octokit/rest')(); async function createTag(owner, repo, tag, sha, message, object, type) { const { data } = await octokit.git.createTag({ owner, repo, tag, message, object, type }); return data; } ", GitHub API , createTag             , Create a new tag in a repository          ," createTag('octocat', 'Hello-World', 'v1.0', 'abc123', 'Release v1.0', 'abc123', 'commit');          ", Node.js            
" const octokit = require('@octokit/rest')(); async function listTags(owner, repo) { const { data } = await octokit.repos.listTags({ owner, repo }); return data; }             ", GitHub API , listTags              , List tags in a repository                 ," listTags('octocat', 'Hello-World');                                                                  ", Node.js            
" const octokit = require('@octokit/rest')(); async function createBlob(owner, repo, content, encoding) { const { data } = await octokit.git.createBlob({ owner, repo, content, encoding }); return data; } ", GitHub API , createBlob            , Create a new blob in a repository         ," createBlob('octocat', 'Hello-World', 'Hello, World!', 'utf-8');                                      ", Node.js            
" const octokit = require('@octokit/rest')(); async function getBlob(owner, repo, file_sha) { const { data } = await octokit.git.getBlob({ owner, repo, file_sha }); return data; } ", GitHub API , getBlob               , Retrieve information about a blob         ," getBlob('octocat', 'Hello-World', 'abc123');                                                         ", Node.js            
" const octokit = require('@octokit/rest')(); async function createTree(owner, repo, tree) { const { data } = await octokit.git.createTree({ owner, repo, tree }); return data; } ", GitHub API , createTree            , Create a new tree in a repository         ," createTree('octocat', 'Hello-World', [{ path: 'file.txt', mode: '100644', type: 'blob', sha: 'abc123' }]); ", Node.js            
" const octokit = require('@octokit/rest')(); async function getTree(owner, repo, tree_sha) { const { data } = await octokit.git.getTree({ owner, repo, tree_sha }); return data; } ", GitHub API , getTree               , Retrieve information about a tree         ," getTree('octocat', 'Hello-World', 'abc123');                                                         ", Node.js            
" const octokit = require('@octokit/rest')(); async function createReference(owner, repo, ref, sha) { const { data } = await octokit.git.createRef({ owner, repo, ref, sha }); return data; } ", GitHub API , createReference       , Create a new reference in a repository    ," createReference('octocat', 'Hello-World', 'heads/master', 'abc123');                                  ", Node.js            
" const octokit = require('@octokit/rest')(); async function getReference(owner, repo, ref) { const { data } = await octokit.git.getRef({ owner, repo, ref }); return data; }   ", GitHub API , getReference          , Retrieve information about a reference    ," getReference('octocat', 'Hello-World', 'heads/master');                                              ", Node.js            
  const vision = require('@google-cloud/vision'); const client = new vision.ImageAnnotatorClient(); async function detectLabels(imagePath) { const [result] = await client.labelDetection(imagePath); const labels = result.labelAnnotations; return labels.map(label => label.description);}  , Google Cloud Vision , detectLabels                  , Detect labels in an image                                                   , detectLabels('path/to/image.jpg');                                                                                                                                                                       , Node.js            
 const vision = require('@google-cloud/vision'); const client = new vision.ImageAnnotatorClient(); async function detectText(imagePath) { const [result] = await client.textDetection(imagePath); const detections = result.textAnnotations; return detections.map(text => text.description);}           , Google Cloud Vision , detectText                    , Detect text in an image                                                     , detectText('path/to/image.jpg');                                                                                                                                                                          , Node.js            
  const vision = require('@google-cloud/vision'); const client = new vision.ImageAnnotatorClient(); async function detectFaces(imagePath) { const [result] = await client.faceDetection(imagePath); const faces = result.faceAnnotations; return faces;}                                       , Google Cloud Vision , detectFaces                   , Detect faces in an image                                                    , detectFaces('path/to/image.jpg');                                                                                                                                                                         , Node.js            
  const vision = require('@google-cloud/vision'); const client = new vision.ImageAnnotatorClient(); async function detectLandmarks(imagePath) { const [result] = await client.landmarkDetection(imagePath); const landmarks = result.landmarkAnnotations; return landmarks;}                           , Google Cloud Vision , detectLandmarks               , Detect landmarks in an image                                                , detectLandmarks('path/to/image.jpg');                                                                                                                                                                     , Node.js            
  const vision = require('@google-cloud/vision'); const client = new vision.ImageAnnotatorClient(); async function detectLogos(imagePath) { const [result] = await client.logoDetection(imagePath); const logos = result.logoAnnotations; return logos;}                                         , Google Cloud Vision , detectLogos                   , Detect logos in an image                                                    , detectLogos('path/to/image.jpg');                                                                                                                                                                         , Node.js            
  const vision = require('@google-cloud/vision'); const client = new vision.ImageAnnotatorClient(); async function detectColors(imagePath) { const [result] = await client.imageProperties(imagePath); const colors = result.imagePropertiesAnnotation.dominantColors.colors; return colors;}                             , Google Cloud Vision , detectColors                  , Detect colors in an image                                                   , detectColors('path/to/image.jpg');                                                                                                                                                                        , Node.js            
  const vision = require('@google-cloud/vision'); const client = new vision.ImageAnnotatorClient(); async function detectSafeSearch(imagePath) { const [result] = await client.safeSearchDetection(imagePath); const safeSearch = result.safeSearchAnnotation; return safeSearch;}                               , Google Cloud Vision , detectSafeSearch              , Detect safe search properties in an image                                   , detectSafeSearch('path/to/image.jpg');                                                                                                                                                                    , Node.js            
  const vision = require('@google-cloud/vision'); const client = new vision.ImageAnnotatorClient(); async function detectProperties(imagePath) { const [result] = await client.imageProperties(imagePath); const properties = result.imagePropertiesAnnotation; return properties;}                        , Google Cloud Vision , detectProperties              , Detect properties of an image                                               , detectProperties('path/to/image.jpg');                                                                                                                                                                    , Node.js            
  const vision = require('@google-cloud/vision'); const client = new vision.ImageAnnotatorClient(); async function detectWebEntities(imagePath) { const [result] = await client.webDetection(imagePath); const webEntities = result.webDetection.webEntities; return webEntities;}                 , Google Cloud Vision , detectWebEntities             , Detect web entities in an image                                             , detectWebEntities('path/to/image.jpg');                                                                                                                                                                   , Node.js            
  const vision = require('@google-cloud/vision'); const client = new vision.ImageAnnotatorClient(); async function detectLocalizedObjects(imagePath) { const [result] = await client.objectLocalization(imagePath); const objects = result.localizedObjectAnnotations; return objects;}  , Google Cloud Vision , detectLocalizedObjects       , Detect localized objects in an image                                        , detectLocalizedObjects('path/to/image.jpg');                                                                                                                                                              , Node.js            
  const vision = require('@google-cloud/vision'); const client = new vision.ImageAnnotatorClient(); async function detectHandwriting(imagePath) { const [result] = await client.documentTextDetection(imagePath); const text = result.fullTextAnnotation; return text;}                               , Google Cloud Vision , detectHandwriting             , Detect handwriting in an image                                              , detectHandwriting('path/to/image.jpg');                                                                                                                                                                   , Node.js            
  const vision = require('@google-cloud/vision'); const client = new vision.ImageAnnotatorClient(); async function detectProductSearch(imagePath) { const [result] = await client.productSearch(imagePath); const products = result.productSearchResults.productGroupedResults; return products;}        , Google Cloud Vision , detectProductSearch          , Detect products in an image                                                  , detectProductSearch('path/to/image.jpg');                                                                                                                                                                 , Node.js            
  const vision = require('@google-cloud/vision'); const client = new vision.ImageAnnotatorClient(); async function detectImageProperties(imagePath) { const [result] = await client.imageProperties(imagePath); return result.imagePropertiesAnnotation;}                                            , Google Cloud Vision , detectImageProperties        , Detect properties of an image                                               , detectImageProperties('path/to/image.jpg');                                                                                                                                                               , Node.js            
  const vision = require('@google-cloud/vision'); const client = new vision.ImageAnnotatorClient(); async function detectCropHints(imagePath) { const [result] = await client.cropHints(imagePath); const cropHints = result.cropHintsAnnotation; return cropHints;}                                , Google Cloud Vision , detectCropHints               , Detect crop hints in an image                                                , detectCropHints('path/to/image.jpg');                                                                                                                                                                     , Node.js            
  const vision = require('@google-cloud/vision'); const client = new vision.ImageAnnotatorClient(); async function detectWebPages(imagePath) { const [result] = await client.webDetection(imagePath); const webPages = result.webDetection.webPages; return webPages;}                                 , Google Cloud Vision , detectWebPages                , Detect web pages in an image                                                 , detectWebPages('path/to/image.jpg');                                                                                                                                                                      , Node.js            
  const vision = require('@google-cloud/vision'); const client = new vision.ImageAnnotatorClient(); async function detectEntities(imagePath) { const [result] = await client.entityAnnotation(imagePath); const entities = result.entityAnnotations; return entities;}                      , Google Cloud Vision , detectEntities                , Detect entities in an image                                                  , detectEntities('path/to/image.jpg');, Node.js            
"  var firebaseConfig = { apiKey: ""YOUR_API_KEY"", authDomain: ""YOUR_AUTH_DOMAIN"", databaseURL: ""YOUR_DATABASE_URL"", projectId: ""YOUR_PROJECT_ID"", storageBucket: ""YOUR_STORAGE_BUCKET"", messagingSenderId: ""YOUR_MESSAGING_SENDER_ID"", appId: ""YOUR_APP_ID"" }; firebase.initializeApp(firebaseConfig);  ", Firebase    , initializeApp           , Initialize Firebase with configuration options         , initializeApp(firebaseConfig);                                                                          , JavaScript         
  var database = firebase.database();                                                                                                                                                                                                                                                             , Firebase    , database                , Get a reference to the Firebase Realtime Database       , var database = firebase.database();                                                                    , JavaScript         
  var storage = firebase.storage();                                                                                                                                                                                                                                                               , Firebase    , storage                 , Get a reference to the Firebase Storage                , var storage = firebase.storage();                                                                      , JavaScript         
  var auth = firebase.auth();                                                                                                                                                                                                                                                                     , Firebase    , auth                    , Get a reference to the Firebase Authentication service , var auth = firebase.auth();                                                                            , JavaScript         
  var messaging = firebase.messaging();                                                                                                                                                                                                                                                           , Firebase    , messaging               , Get a reference to the Firebase Cloud Messaging service , var messaging = firebase.messaging();                                                                  , JavaScript         
  var firestore = firebase.firestore();                                                                                                                                                                                                                                                           , Firebase    , firestore               , Get a reference to the Firestore Database             , var firestore = firebase.firestore();                                                                  , JavaScript         
  var functions = firebase.functions();                                                                                                                                                                                                                                                           , Firebase    , functions               , Get a reference to the Cloud Functions service         , var functions = firebase.functions();                                                                  , JavaScript         
  var analytics = firebase.analytics();                                                                                                                                                                                                                                                           , Firebase    , analytics               , Get a reference to the Firebase Analytics service      , var analytics = firebase.analytics();                                                                  , JavaScript         
  var performance = firebase.performance();                                                                                                                                                                                                                                                       , Firebase    , performance             , Get a reference to the Firebase Performance service    , var performance = firebase.performance();                                                              , JavaScript         
  var remoteConfig = firebase.remoteConfig();                                                                                                                                                                                                                                                     , Firebase    , remoteConfig            , Get a reference to the Remote Config service          , var remoteConfig = firebase.remoteConfig();                                                            , JavaScript         
"  var database = firebase.database(); var ref = database.ref('path/to/data'); ref.once('value', function(snapshot) { console.log(snapshot.val()); });                                                                                                                                           ", Firebase    , once                    , Read data from the Realtime Database once              ,"  var ref = database.ref('path/to/data'); ref.once('value', function(snapshot) { console.log(snapshot.val()); });  ", JavaScript         
"  var database = firebase.database(); var ref = database.ref('path/to/data'); ref.on('value', function(snapshot) { console.log(snapshot.val()); });                                                                                                                                             ", Firebase    , on                      , Listen for changes to data in the Realtime Database    ,"  var ref = database.ref('path/to/data'); ref.on('value', function(snapshot) { console.log(snapshot.val()); });    ", JavaScript         
  var database = firebase.database(); var ref = database.ref('path/to/data'); ref.set(data);                                                                                                                                                                                                     , Firebase    , set                     , Write data to the Realtime Database                      , ref.set(data);                                                                                          , JavaScript         
  var database = firebase.database(); var ref = database.ref('path/to/data'); ref.update(updates);                                                                                                                                                                                               , Firebase    , update                  , Update specific fields in the Realtime Database          , ref.update(updates);                                                                                    , JavaScript         
  var database = firebase.database(); var ref = database.ref('path/to/data'); ref.remove();                                                                                                                                                                                                       , Firebase    , remove                  , Remove data from the Realtime Database                   , ref.remove();                                                                                           , JavaScript         
  var database = firebase.database(); var ref = database.ref('path/to/data'); ref.push(data);                                                                                                                                                                                                     , Firebase    , push                    , Add data to the Realtime Database                         , ref.push(data);                                                                                         , JavaScript         
  var storage = firebase.storage(); var storageRef = storage.ref(); var fileRef = storageRef.child('path/to/file'); fileRef.getDownloadURL().then(function(url) { console.log(url); }).catch(function(error) { console.error(error); });                                                                                                         , Firebase    , getDownloadURL          , Get the download URL for a file in Firebase Storage       ,  fileRef.getDownloadURL().then(function(url) { console.log(url); }).catch(function(error) { console.error(error); });   , JavaScript         
  var storage = firebase.storage(); var storageRef = storage.ref(); var fileRef = storageRef.child('path/to/file'); fileRef.put(file).then(function(snapshot) { console.log('Uploaded a file!'); }).catch(function(error) { console.error(error); });                                                                                                      , Firebase    , put                     , Upload a file to Firebase Storage                        ,  fileRef.put(file).then(function(snapshot) { console.log('Uploaded a file!'); }).catch(function(error) { console.error(error); });  , JavaScript         
"  var auth = firebase.auth(); var email = 'example@example.com'; var password = 'password'; auth.createUserWithEmailAndPassword(email, password).then(function(userCredential) { console.log('User created!', userCredential.user); }).catch(function(error) { console.error(error); });                                                                ", Firebase    , createUserWithEmailAndPassword , Create a user with email and password             ,"  auth.createUserWithEmailAndPassword(email, password).then(function(userCredential) { console.log('User created!', userCredential.user); }).catch(function(error) { console.error(error); });  ", JavaScript         
"  var auth = firebase.auth(); var email = 'example@example.com'; var password = 'password'; auth.signInWithEmailAndPassword(email, password).then(function(userCredential) { console.log('User signed in!', userCredential.user); }).catch(function(error) { console.error(error); });                                                                  ", Firebase    , signInWithEmailAndPassword    , Sign in a user with email and password           ,"  auth.signInWithEmailAndPassword(email, password).then(function(userCredential) { console.log('User signed in!', userCredential.user); }).catch(function(error) { console.error(error); });     ", JavaScript         
"  var map; function initMap() { map = new google.maps.Map(document.getElementById('map'), { center: {lat: -34.397, lng: 150.644}, zoom: 8 }); }                                                                                       ", Google Maps    , initMap                , Initialize the Google Map with specified options            ,  initMap();                                                                                    , JavaScript         
"  var map; function initMap() { map = new google.maps.Map(document.getElementById('map'), { center: {lat: -34.397, lng: 150.644}, zoom: 8 }); var marker = new google.maps.Marker({ position: {lat: -34.397, lng: 150.644}, map: map, title: 'Marker' }); }                                        ", Google Maps    , addMarker              , Add a marker to the Google Map with specified position     ,  initMap();                                                                                    , JavaScript         
"  var map; function initMap() { map = new google.maps.Map(document.getElementById('map'), { center: {lat: -34.397, lng: 150.644}, zoom: 8 }); var circle = new google.maps.Circle({ center: {lat: -34.397, lng: 150.644}, radius: 1000, map: map, fillColor: '#AA0000' }); }                            ", Google Maps    , addCircle              , Add a circle to the Google Map with specified position     ,  initMap();                                                                                    , JavaScript         
"  var map; function initMap() { map = new google.maps.Map(document.getElementById('map'), { center: {lat: -34.397, lng: 150.644}, zoom: 8 }); var polyline = new google.maps.Polyline({ path: [{lat: -34.397, lng: 150.644}, {lat: -35.397, lng: 151.644}], geodesic: true, strokeColor: '#FF0000', strokeOpacity: 1.0, strokeWeight: 2, map: map }); }  ", Google Maps    , addPolyline            , Add a polyline to the Google Map with specified path       ,  initMap();                                                                                    , JavaScript         
"  var map; function initMap() { map = new google.maps.Map(document.getElementById('map'), { center: {lat: -34.397, lng: 150.644}, zoom: 8 }); var polygon = new google.maps.Polygon({ paths: [{lat: -34.397, lng: 150.644}, {lat: -35.397, lng: 151.644}, {lat: -33.397, lng: 151.644}], strokeColor: '#FF0000', strokeOpacity: 0.8, strokeWeight: 2, fillColor: '#FF0000', fillOpacity: 0.35, map: map }); }      ", Google Maps    , addPolygon             , Add a polygon to the Google Map with specified paths       ,  initMap();                                                                                    , JavaScript         
"  var map; function initMap() { map = new google.maps.Map(document.getElementById('map'), { center: {lat: -34.397, lng: 150.644}, zoom: 8 }); var rectangle = new google.maps.Rectangle({ bounds: {north: -33.425, south: -34.655, east: 151.425, west: 150.655}, strokeColor: '#FF0000', strokeOpacity: 0.8, strokeWeight: 2, fillColor: '#FF0000', fillOpacity: 0.35, map: map }); }        ", Google Maps    , addRectangle           , Add a rectangle to the Google Map with specified bounds    ,  initMap();                                                                                    , JavaScript         
"  var map; function initMap() { map = new google.maps.Map(document.getElementById('map'), { center: {lat: -34.397, lng: 150.644}, zoom: 8 }); var infoWindow = new google.maps.InfoWindow({ content: 'Hello, World!' }); infoWindow.open(map, marker); }                                                           ", Google Maps    , openInfoWindow         , Open an info window on the Google Map at specified position ,  initMap();                                                                                    , JavaScript         
"  var map; function initMap() { map = new google.maps.Map(document.getElementById('map'), { center: {lat: -34.397, lng: 150.644}, zoom: 8 }); var bounds = new google.maps.LatLngBounds(); bounds.extend({lat: -34.397, lng: 150.644}); bounds.extend({lat: -35.397, lng: 151.644}); map.fitBounds(bounds); }                                 ", Google Maps    , fitBounds              , Fit the map to contain all specified bounds                ,  initMap();                                                                                    , JavaScript         
"  var map; function initMap() { map = new google.maps.Map(document.getElementById('map'), { center: {lat: -34.397, lng: 150.644}, zoom: 8 }); var geocoder = new google.maps.Geocoder(); geocoder.geocode({ 'address': 'Sydney, Australia' }, function(results, status) { if (status == 'OK') { map.setCenter(results[0].geometry.location); } }); }                          ", Google Maps    , geocode                 , Geocode an address and center the map on the result        ,  initMap();                                                                                    , JavaScript         
"  var map; function initMap() { map = new google.maps.Map(document.getElementById('map'), { center: {lat: -34.397, lng: 150.644}, zoom: 8 }); var directionsService = new google.maps.DirectionsService(); var directionsRenderer = new google.maps.DirectionsRenderer(); directionsRenderer.setMap(map); directionsService.route({ origin: 'Sydney, Australia', destination: 'Melbourne, Australia', travelMode: 'DRIVING' }, function(response, status) { if (status == 'OK') { directionsRenderer.setDirections(response); } }); }  ", Google Maps    , directions              , Display directions between two locations on the map       ,  initMap();                                                                                    , JavaScript         
"  var map; function initMap() { map = new google.maps.Map(document.getElementById('map'), { center: {lat: -34.397, lng: 150.644}, zoom: 8 }); var placesService = new google.maps.places.PlacesService(map); placesService.textSearch({ query: 'restaurants in Sydney' }, function(results, status) { if (status == google.maps.places.PlacesServiceStatus.OK) { for (var i = 0; i < results.length; i++) { var place = results[i]; var marker = new google.maps.Marker({ position: place.geometry.location, map: map, title: place.name }); } } }); }  ", Google Maps    , textSearch              , Perform a text search for places and,  initMap();                                                                                    , JavaScript         
"  var placesService = new google.maps.places.PlacesService(map); placesService.nearbySearch({ location: { lat: 40.7128, lng: -74.0060 }, radius: 1000, type: 'restaurant' }, function(results, status) { if (status === google.maps.places.PlacesServiceStatus.OK) { results.forEach(function(place) { console.log(place.name); }); } });  ", Google Places API , nearbySearch         , Search for nearby places                                                ,"  nearbySearch({ location: { lat: 40.7128, lng: -74.0060 }, radius: 1000, type: 'restaurant' }, callback);                    ", JavaScript         
"  var placesService = new google.maps.places.PlacesService(map); placesService.textSearch({ query: 'restaurants in New York' }, function(results, status) { if (status === google.maps.places.PlacesServiceStatus.OK) { results.forEach(function(place) { console.log(place.name); }); } });                            ", Google Places API , textSearch           , Search for places based on a text query                                ,"  textSearch({ query: 'restaurants in New York' }, callback);                                                                 ", JavaScript         
"  var placesService = new google.maps.places.PlacesService(map); placesService.getDetails({ placeId: 'ChIJN1t_tDeuEmsRUsoyG83frY4' }, function(place, status) { if (status === google.maps.places.PlacesServiceStatus.OK) { console.log(place.name); } });                                                             ", Google Places API , getDetails           , Get details of a place by place ID                                      ,"  getDetails({ placeId: 'ChIJN1t_tDeuEmsRUsoyG83frY4' }, callback);                                                        ", JavaScript         
"  var placesService = new google.maps.places.PlacesService(map); placesService.photo({ photoreference: 'CnRtAAAAN2lIvW48JtLWROlS3G5u3YjTTyP5OqGT5a_2Dea4O_1_0gQf9pjUR9GYyDkMtY4G9UfMEfypjxgTo8Rc75psCm10KRucmWOf91dDv6k0SKXZcLe3at1mmuBmHdGBqHUWoS8qKJHoS9ChUInNQjw', maxWidth: 1000 }, function(photoResult, photoStatus) { if (photoStatus === google.maps.places.PlacesServiceStatus.OK) { console.log(photoResult); } });  ", Google Places API , photo                , Get a photo of a place                                                   ,"  photo({ photoreference: 'YOUR_PHOTO_REFERENCE', maxWidth: 1000 }, callback);                                                 ", JavaScript         
"  var placesService = new google.maps.places.PlacesService(map); placesService.findPlaceFromQuery({ query: 'Eiffel Tower' }, function(results, status) { if (status === google.maps.places.PlacesServiceStatus.OK) { results.forEach(function(place) { console.log(place.name); }); } });                                   ", Google Places API , findPlaceFromQuery   , Find places based on a query                                             ,"  findPlaceFromQuery({ query: 'Eiffel Tower' }, callback);                                                                    ", JavaScript         
"  var placesService = new google.maps.places.PlacesService(map); placesService.findPlaceFromPhoneNumber({ phoneNumber: '+16502530000' }, function(results, status) { if (status === google.maps.places.PlacesServiceStatus.OK) { results.forEach(function(place) { console.log(place.name); }); } });                         ", Google Places API , findPlaceFromPhoneNumber , Find places based on a phone number                                 ,"  findPlaceFromPhoneNumber({ phoneNumber: '+16502530000' }, callback);                                                  ", JavaScript         
"  var placesService = new google.maps.places.PlacesService(map); placesService.getQueryPredictions({ input: 'pizza near New York' }, function(predictions, status) { if (status === google.maps.places.PlacesServiceStatus.OK) { predictions.forEach(function(prediction) { console.log(prediction.description); }); } });             ", Google Places API , getQueryPredictions  , Get query predictions                                                    ,"  getQueryPredictions({ input: 'pizza near New York' }, callback);                                                            ", JavaScript         
"  var placesService = new google.maps.places.PlacesService(map); placesService.getPlacePredictions({ input: 'pizza near New York' }, function(predictions, status) { if (status === google.maps.places.PlacesServiceStatus.OK) { predictions.forEach(function(prediction) { console.log(prediction.description); }); } });             ", Google Places API , getPlacePredictions  , Get place predictions                                                    ,"  getPlacePredictions({ input: 'pizza near New York' }, callback);                                                            ", JavaScript         
"  var placesService = new google.maps.places.PlacesService(map); placesService.autocomplete({ input: 'pizza near New York' }, function(predictions, status) { if (status === google.maps.places.PlacesServiceStatus.OK) { predictions.forEach(function(prediction) { console.log(prediction.description); }); } });                      ", Google Places API , autocomplete          , Perform autocomplete on a query                                          ,"  autocomplete({ input: 'pizza near New York' }, callback);                                                                   ", JavaScript         
"  var placesService = new google.maps.places.PlacesService(map); placesService.getPlaceById({ placeId: 'ChIJN1t_tDeuEmsRUsoyG83frY4' }, function(results, status) { if (status === google.maps.places.PlacesServiceStatus.OK) { console.log(results[0].name); } });                                                         ", Google Places API , getPlaceById          , Get place details by place ID                                             ,"  getPlaceById({ placeId: 'ChIJN1t_tDeuEmsRUsoyG83frY4' }, callback);                                                        ", JavaScript         
  GET /me/drive/root/children                                                                                                                                                                                                                             , Microsoft Graph API , Get Drive Items     , Retrieve a list of items in the root of the user's OneDrive. ,  GET /me/drive/root/children                                                                         , HTTP               
"  GET /me/messages?$search=""meeting""                                                                                                                                                                                                                     ", Microsoft Graph API , Search Messages     ," Search for messages containing the term ""meeting"".            ","  GET /me/messages?$search=""meeting""                                                                  ", HTTP               
  POST /me/sendMail                                                                                                                                                                                                                                      , Microsoft Graph API , Send Mail           , Send an email from the signed-in user's mailbox.             ,  POST /me/sendMail                                                                                   , HTTP               
  GET /me/calendarView?$filter=startDateTime ge 2022-06-01T00:00:00Z and endDateTime le 2022-06-30T23:59:59Z                                                                                                                                            , Microsoft Graph API , Get Calendar View   , Retrieve the user's calendar events within a specified date range. ,  GET /me/calendarView?$filter=startDateTime ge 2022-06-01T00:00:00Z and endDateTime le 2022-06-30T23:59:59Z  , HTTP               
  POST /me/drive/items/{item-id}/copy                                                                                                                                                                                                                   , Microsoft Graph API , Copy Drive Item     , Copy a file or folder within the user's OneDrive.            ,  POST /me/drive/items/{item-id}/copy                                                                 , HTTP               
  PATCH /me/drive/items/{item-id}                                                                                                                                                                                                                        , Microsoft Graph API , Update Drive Item   , Update properties of a file or folder in OneDrive.           ,  PATCH /me/drive/items/{item-id}                                                                      , HTTP               
  DELETE /me/drive/items/{item-id}                                                                                                                                                                                                                       , Microsoft Graph API , Delete Drive Item   , Delete a file or folder from the user's OneDrive.            ,  DELETE /me/drive/items/{item-id}                                                                     , HTTP               
  GET /me/contacts                                                                                                                                                                                                                                       , Microsoft Graph API , Get Contacts        , Retrieve the user's contacts.                                ,  GET /me/contacts                                                                                    , HTTP               
  GET /me/events                                                                                                                                                                                                                                         , Microsoft Graph API , Get Events          , Retrieve the user's calendar events.                         ,  GET /me/events                                                                                      , HTTP               
  POST /me/events                                                                                                                                                                                                                                        , Microsoft Graph API , Create Event        , Create a new event in the user's calendar.                   ,  POST /me/events                                                                                     , HTTP               
  GET /me/people                                                                                                                                                                                                                                 , Microsoft Graph API , Get People           , Retrieve a list of people that the signed-in user interacts with most frequently.                                                     ,  GET /me/people                                                                                                                                                  , HTTP               
  GET /me/drive/recent                                                                                                                                                                                                                           , Microsoft Graph API , Get Recent Items     , Retrieve a list of recently accessed items in the user's OneDrive.                                                                   ,  GET /me/drive/recent                                                                                                                                           , HTTP               
  GET /me/drive/root/search(q='finance')                                                                                                                                                                                                         , Microsoft Graph API , Search Drive         ," Search for files and folders in the user's OneDrive with the keyword ""finance"".                                                      ",  GET /me/drive/root/search(q='finance')                                                                                                                         , HTTP               
  POST /me/drive/root/children                                                                                                                                                                                                                   , Microsoft Graph API , Upload File          , Upload a file to the root of the user's OneDrive.                                                                                     ,  POST /me/drive/root/children                                                                                                                                   , HTTP               
  GET /me/drive/items/{item-id}/permissions                                                                                                                                                                                                       , Microsoft Graph API , Get Permissions      , Retrieve permissions associated with a specific file or folder in OneDrive.                                                          ,  GET /me/drive/items/{item-id}/permissions                                                                                                                      , HTTP               
  POST /me/drive/items/{item-id}/invite                                                                                                                                                                                                           , Microsoft Graph API , Share Item           , Share a file or folder with specific users or groups in OneDrive.                                                                     ,  POST /me/drive/items/{item-id}/invite                                                                                                                          , HTTP               
  GET /me/drive/items/{item-id}/thumbnails                                                                                                                                                                                                        , Microsoft Graph API , Get Thumbnails       , Retrieve thumbnails of images or videos associated with a specific file in OneDrive.                                                  ,  GET /me/drive/items/{item-id}/thumbnails                                                                                                                       , HTTP               
  POST /me/calendars/{calendar-id}/events                                                                                                                                                                                                         , Microsoft Graph API , Create Calendar Event , Create a new event in the user's calendar.                                                                                            ,  POST /me/calendars/{calendar-id}/events                                                                                                                         , HTTP               
  POST /me/contacts                                                                                                                                                                                                                              , Microsoft Graph API , Create Contact       , Create a new contact in the user's contacts list.                                                                                     ,  POST /me/contacts                                                                                                                                               , HTTP               
  POST /me/messages                                                                                                                                                                                                                               , Microsoft Graph API , Reply to Message     , Reply to a received email message in the user's mailbox.                                                                               ,  POST /me/messages                                                                                                                                               , HTTP               
